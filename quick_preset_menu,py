# quick_preset_menu.py â€“ Dropdown Preset Menu
# --------------------------------------------------------------------

from pathlib import Path
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QFont, QIcon
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton, 
    QLabel, QFrame, QDialog
)

from ui_components import ACCENT, HIGHLIGHT_COLORS
from dialogs import TagDialog

class QuickPresetMenu(QFrame):
    preset_selected = Signal(dict)
    
    def __init__(self, selected_text, pos, parent=None):
        super().__init__(parent)
        self.setWindowFlags(Qt.Popup | Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.selected_text = selected_text
        
        self.setStyleSheet(f"""
            QFrame {{
                background: #2a2a2a;
                border: 2px solid {ACCENT};
                border-radius: 8px;
                padding: 4px;
            }}
            QPushButton {{
                background: #3a3a3a;
                color: white;
                border: 1px solid #555;
                border-radius: 6px;
                padding: 8px 12px;
                text-align: left;
                font-size: 11px;
            }}
            QPushButton:hover {{
                background: {ACCENT};
                border: 1px solid #d8b9f1;
            }}
            QPushButton:pressed {{
                background: #b894d1;
            }}
            QLabel {{
                color: #aaa;
                font-size: 10px;
                padding: 4px 8px;
            }}
        """)
        
        self.setup_menu()
        self.move(pos)
        
    def setup_menu(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(6, 6, 6, 6)
        layout.setSpacing(2)
        
        # Header
        if len(self.selected_text) > 30:
            preview = self.selected_text[:30] + "..."
        else:
            preview = self.selected_text
        
        header = QLabel(f'"{preview}"')
        header.setStyleSheet("color: white; font-weight: bold; padding: 4px;")
        layout.addWidget(header)
        
        # Load presets and get most used
        presets = self.load_presets()
        most_used = self.get_most_used_presets(presets, 6)
        
        # Add preset buttons
        if most_used:
            for preset_name, preset_data in most_used:
                btn = QPushButton(f"âœ¨ {preset_name}")
                color_name = preset_data.get('color', 'Purple')
                btn.setToolTip(f"Color: {color_name}")
                btn.clicked.connect(lambda checked, p=preset_data: self.select_preset(p))
                layout.addWidget(btn)
        else:
            # No presets yet
            no_presets = QLabel("No presets yet")
            no_presets.setStyleSheet("color: #666; font-style: italic;")
            layout.addWidget(no_presets)
        
        # Separator
        separator = QFrame()
        separator.setFrameShape(QFrame.HLine)
        separator.setStyleSheet("background: #555; height: 1px; margin: 4px 0px;")
        layout.addWidget(separator)
        
        # Custom option
        custom_btn = QPushButton("ðŸŽ¨ Custom Tag...")
        custom_btn.clicked.connect(self.create_custom)
        layout.addWidget(custom_btn)
        
        self.adjustSize()
    
    def load_presets(self):
        """Load presets from file"""
        import json
        try:
            presets_file = Path.home() / ".atnolol_presets.json"
            if presets_file.exists():
                with open(presets_file, 'r') as f:
                    return json.load(f)
        except Exception:
            pass
        return {}
    
    def get_most_used_presets(self, presets, limit=6):
        """Get most used presets (for now just return first 6, later we can track usage)"""
        # TODO: Track usage count and sort by most used
        # For now, just return first 6 presets
        items = list(presets.items())[:limit]
        return items
    
    def select_preset(self, preset_data):
        """Select a preset and emit signal"""
        self.preset_selected.emit(preset_data)
        self.close()
    
    def create_custom(self):
        """Open custom tag dialog"""
        self.close()  # Close the dropdown first
        
        # Open the regular tag dialog
        try:
            from dialogs import TagDialog
            dlg = TagDialog(ACCENT, parent=self.parent())
            if dlg.exec() == QDialog.Accepted:
                tag_data = dlg.get_data()
                if tag_data["title"]:
                    self.preset_selected.emit(tag_data)
        except Exception as e:
            print(f"Custom dialog error: {e}")
    
    def mousePressEvent(self, event):
        """Close if clicking outside"""
        self.close()
    
    def keyPressEvent(self, event):
        """Close on Escape"""
        if event.key() == Qt.Key_Escape:
            self.close()
        super().keyPressEvent(event)